{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the compose-me documentation! Compose-me is a tool inspired by Helm to create templates for docker-compose projects. It is particularly useful for relatively complex applications that requires some customization. Compose-me allows you to create a template project that can be configured using a small subset of well-defined values. Charts created for compose-me use the Jinja template engine and will therefore, directory structure aside, look a little bit different from Helm charts. Features Auxiliary files : Compose-me allows you to include auxiliary files in your chart that will be copied to the output directory. This is useful for configuration files, scripts, etc. Python plugins : Compose-me allows you to embed a Python plugin in your chart that can be used to compute values and register Jinja template filters. Installation Install compose-me from PyPI: $ pipx install compose-me Compose-me requires Python 3.10 or newer.","title":"Welcome to the compose-me documentation!"},{"location":"#welcome-to-the-compose-me-documentation","text":"Compose-me is a tool inspired by Helm to create templates for docker-compose projects. It is particularly useful for relatively complex applications that requires some customization. Compose-me allows you to create a template project that can be configured using a small subset of well-defined values. Charts created for compose-me use the Jinja template engine and will therefore, directory structure aside, look a little bit different from Helm charts.","title":"Welcome to the compose-me documentation!"},{"location":"#features","text":"Auxiliary files : Compose-me allows you to include auxiliary files in your chart that will be copied to the output directory. This is useful for configuration files, scripts, etc. Python plugins : Compose-me allows you to embed a Python plugin in your chart that can be used to compute values and register Jinja template filters.","title":"Features"},{"location":"#installation","text":"Install compose-me from PyPI: $ pipx install compose-me Compose-me requires Python 3.10 or newer.","title":"Installation"},{"location":"charts/","text":"Charts Similar to a Helm chart, a Compose-me chart is a directory containing template files. The main entrypoint is the docker-compose.template.yaml file. This file is a Jinja template that will be rendered into a docker-compose.yaml file in the output directory. Example: # docker-compose.template.yaml version: '3.4' services: web: image: \"{{Values.image}}\" ports: - \"{{Values.port}}:80\" volumes: - ./nginx.conf:/etc/nginx/default.conf:ro Values The Values object contains the values defined in the values.yaml file. A chart may define its default values in this file. The values can be overriden by the project. Example: # values.yaml image: nginx:alpine port: 80 Auxiliary files Additional files can be rendered using Jinja templates and copied to the output directory alongside the docker-compose.yaml file. These files must be listed in the x-compose-me.templates section. # docker-compose.template.yaml # ... x-compose-me: templates: - ./nginx.conf Plugins A chart may contain a plugin.py script in the root of your project. This script is executed before rendering the templates and can be used to define custom Jinja filters, as well as generating computed values that can be referenced in the templates using the Computed object. Example: # plugin.py from compose_me import filter from typing import Any from urllib.parse import urlparse @filter def add_one(value: int) -> int: return value + 1 def get_computed_values(values: dict[str, Any]) -> dict[str, Any]: return { \"repository\": values[\"image\"].split(\":\")[0], \"tag\": values[\"image\"].split(\":\")[0], } # docker-compose.template.yaml services: web: image: \"{{Computed.repository}}:{{Computed.tag}}\" ports: - \"{{Values.port|add_one}}:80\"","title":"Charts"},{"location":"charts/#charts","text":"Similar to a Helm chart, a Compose-me chart is a directory containing template files. The main entrypoint is the docker-compose.template.yaml file. This file is a Jinja template that will be rendered into a docker-compose.yaml file in the output directory. Example: # docker-compose.template.yaml version: '3.4' services: web: image: \"{{Values.image}}\" ports: - \"{{Values.port}}:80\" volumes: - ./nginx.conf:/etc/nginx/default.conf:ro","title":"Charts"},{"location":"charts/#values","text":"The Values object contains the values defined in the values.yaml file. A chart may define its default values in this file. The values can be overriden by the project. Example: # values.yaml image: nginx:alpine port: 80","title":"Values"},{"location":"charts/#auxiliary-files","text":"Additional files can be rendered using Jinja templates and copied to the output directory alongside the docker-compose.yaml file. These files must be listed in the x-compose-me.templates section. # docker-compose.template.yaml # ... x-compose-me: templates: - ./nginx.conf","title":"Auxiliary files"},{"location":"charts/#plugins","text":"A chart may contain a plugin.py script in the root of your project. This script is executed before rendering the templates and can be used to define custom Jinja filters, as well as generating computed values that can be referenced in the templates using the Computed object. Example: # plugin.py from compose_me import filter from typing import Any from urllib.parse import urlparse @filter def add_one(value: int) -> int: return value + 1 def get_computed_values(values: dict[str, Any]) -> dict[str, Any]: return { \"repository\": values[\"image\"].split(\":\")[0], \"tag\": values[\"image\"].split(\":\")[0], } # docker-compose.template.yaml services: web: image: \"{{Computed.repository}}:{{Computed.tag}}\" ports: - \"{{Values.port|add_one}}:80\"","title":"Plugins"},{"location":"projects/","text":"Projects A project is a chart materialized into a directory with values. This is analogous to what docker-compose calls \"projects\" as well. What is different is that a values.yaml file is required in the project which specifies the project's source chart and value overrides. We also track the list of files managed by the chart in a .filelist.txt file. Materializing a chart Create a directory that will serve as the docker-compose project directory. In this directory, create a values.yaml file that specifies the chart source and value overrides. We currently only support a local directory as the chart source. The values specified in the project will override default values in the chart. Objects in the YAML are merged recursively, while all other values are replaced. Example # values.yaml chart: ../chart foo: bar In the project directory, run the compose-me command to materialize the chart. $ compose-me [INFO] Loading plugin ../chart/plugin.py [INFO] Rendering chart ../chart to . [INFO] Loading filelist from .filelist.txt [INFO] Rendering docker-compose.yaml [INFO] Loading docker-compose.yaml [INFO] Rendering nginx.conf [INFO] Writing filelist to .filelist.txt","title":"Projects"},{"location":"projects/#projects","text":"A project is a chart materialized into a directory with values. This is analogous to what docker-compose calls \"projects\" as well. What is different is that a values.yaml file is required in the project which specifies the project's source chart and value overrides. We also track the list of files managed by the chart in a .filelist.txt file.","title":"Projects"},{"location":"projects/#materializing-a-chart","text":"Create a directory that will serve as the docker-compose project directory. In this directory, create a values.yaml file that specifies the chart source and value overrides. We currently only support a local directory as the chart source. The values specified in the project will override default values in the chart. Objects in the YAML are merged recursively, while all other values are replaced. Example # values.yaml chart: ../chart foo: bar In the project directory, run the compose-me command to materialize the chart. $ compose-me [INFO] Loading plugin ../chart/plugin.py [INFO] Rendering chart ../chart to . [INFO] Loading filelist from .filelist.txt [INFO] Rendering docker-compose.yaml [INFO] Loading docker-compose.yaml [INFO] Rendering nginx.conf [INFO] Writing filelist to .filelist.txt","title":"Materializing a chart"}]}